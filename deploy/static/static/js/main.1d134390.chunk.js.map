{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["https","require","styles","App","textAlign","AppHeader","backgroundColor","minHeight","display","flexDirection","fontSize","color","webcam","alignContent","useState","calibrate","setCalibrate","webcamRef","useRef","capture","useCallback","current","getScreenshot","useEffect","interval","setInterval","clearInterval","style","fluid","audio","height","ref","screenshotFormat","width","videoConstraints","facingMode","variant","onClick","data","callback","post_options","host","path","method","headers","Buffer","byteLength","JSON","stringify","console","log","post_req","request","res","setEncoding","returnData","on","chunk","write","end","httpsPost","response","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yLAIMA,EAAQC,EAAQ,IAEhBC,EAAS,CACbC,IAAK,CACHC,UAAW,UAGbC,UAAW,CACTC,gBAAiB,UACjBC,UAAW,QACXC,QAAS,OACTC,cAAe,SACfC,SAAU,qBACVC,MAAO,SAGTC,OAAQ,CACNC,aAAc,WA4FHV,IAxFf,WAAgB,IAAD,EACqBW,oBAAS,GAD9B,mBACNC,EADM,KACKC,EADL,OAEWF,mBAAS,IAFpB,mBAGPG,GAHO,UAGKC,iBAAO,OAEnBC,EAAUC,uBACd,WACmBH,EAAUI,QAAQC,kBAMrC,CAACL,IA4CH,OAzCAM,qBAAU,WACR,IAAMC,EAAWC,aAAY,WAC3BN,MACC,GACH,OAAO,kBAAMO,cAAcF,OAsC3B,yBAAKG,MAAOzB,EAAOC,KACjB,4BAAQwB,MAAOzB,EAAOG,WACpB,kBAAC,IAAD,CAAWuB,OAAK,GACd,2CAEF,yBAAK1B,OAAQA,EAAOU,QAClB,kBAAC,IAAD,CACEiB,OAAO,EACPC,OAAQ,IACRC,IAAKd,EACLe,iBAAiB,aACjBC,MAAO,IACPC,iBA/Ce,CACvBD,MAAO,IACPH,OAAQ,IACRK,WAAY,UA8CN,kBAAC,IAAD,CACEC,QAAQ,UACRC,QAAS,YA7CD,SAACC,EAAMC,GACvB,IAAIC,EAAe,CACjBC,KAAO,GACPC,KAAM,cACNC,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChB,iBAAkBC,EAAOC,WAAWC,KAAKC,UAAUV,MAIvDW,QAAQC,IAAIH,KAAKC,UAAUV,IAE3B,IAAIa,EAAWnD,EAAMoD,QAAQZ,GAAc,SAAAa,GACzCA,EAAIC,YAAY,QAChB,IAAIC,EAAa,GACjBF,EAAIG,GAAG,QAAQ,SAAAC,GACbF,GAAcE,KAEhBJ,EAAIG,GAAG,OAAO,WACZP,QAAQC,IAAIK,GACZhB,EAASgB,SAGbJ,EAASO,MAAMX,KAAKC,UAAUV,IAC9Ba,EAASQ,MAqBCC,CAAU,CAAC,MAAS3C,EAAUI,QAAQC,gBAAiB,YAAcP,IAAY,SAAA8C,GAC/EZ,QAAQC,IAAIW,GACZ7C,EAAa,aALnB,mB,mNCrFU8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAACjE,EAAA,EAAD,MAASkE,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1d134390.chunk.js","sourcesContent":["import React, {useEffect, useCallback, useRef, useState} from \"react\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Webcam from \"react-webcam\";\nimport Button from \"react-bootstrap/Button\";\nconst https = require(\"https\");\n\nconst styles = {\n  App: {\n    textAlign: \"center\",\n  },\n\n  AppHeader: {\n    backgroundColor: \"#282c34\",\n    minHeight: \"100vh\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    fontSize: \"calc(10px + 2vmin)\",\n    color: \"white\",\n  },\n\n  webcam: {\n    alignContent: \"center\",\n  },\n};\n\nfunction App() {\n  const [calibrate, setCalibrate] = useState(false);\n  const [note, setNote] = useState(\"\");\n  const webcamRef = useRef(null);\n   \n  const capture = useCallback(\n    () => {\n      const imageSrc = webcamRef.current.getScreenshot();\n      if (calibrate) {\n        // const response  = $.post(\"./api/detect\", {image: imageSrc});\n        // setNote(response[\"note\"]);\n      }\n    },\n    [webcamRef]\n  );\n  \n  useEffect(() => {\n    const interval = setInterval(() => {\n      capture();\n    }, 0);\n    return () => clearInterval(interval);\n  });\n\n  const videoConstraints = {\n    width: 600,\n    height: 600,\n    facingMode: \"user\"\n  };\n\n  const httpsPost = (data, callback) => {\n    var post_options = {\n      host:  \"\",\n      path: \"/api/detect\",\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Content-Length\": Buffer.byteLength(JSON.stringify(data))\n      }\n    };\n\n    console.log(JSON.stringify(data));\n\n    var post_req = https.request(post_options, res => {\n      res.setEncoding(\"utf8\");\n      var returnData = \"\";\n      res.on(\"data\", chunk =>  {\n        returnData += chunk;\n      });\n      res.on(\"end\", () => {\n        console.log(returnData);\n        callback(returnData);\n      });\n    });\n    post_req.write(JSON.stringify(data));\n    post_req.end();\n  };\n\n  return (\n    <div style={styles.App}>\n      <header style={styles.AppHeader}>\n        <Jumbotron fluid>\n          <h1>Jazz Hands</h1>\n        </Jumbotron>\n        <div styles={styles.webcam}>\n          <Webcam\n            audio={false}\n            height={600}\n            ref={webcamRef}\n            screenshotFormat=\"image/jpeg\"\n            width={600}\n            videoConstraints={videoConstraints}\n          />\n          <Button \n            variant=\"primary\" \n            onClick={() => {\n              httpsPost({\"image\": webcamRef.current.getScreenshot(), \"calibratred\":calibrate}, response => {\n                console.log(response);\n                setCalibrate(\"true\");\n              });\n            }}>\n          Calibrate\n          </Button>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}